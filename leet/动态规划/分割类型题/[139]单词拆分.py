# ÁªôÂÆö‰∏Ä‰∏™ÈùûÁ©∫Â≠óÁ¨¶‰∏≤ s Âíå‰∏Ä‰∏™ÂåÖÂê´ÈùûÁ©∫ÂçïËØçÁöÑÂàóË°® wordDictÔºåÂà§ÂÆö s ÊòØÂê¶ÂèØ‰ª•Ë¢´Á©∫Ê†ºÊãÜÂàÜ‰∏∫‰∏Ä‰∏™ÊàñÂ§ö‰∏™Âú®Â≠óÂÖ∏‰∏≠Âá∫Áé∞ÁöÑÂçïËØç„ÄÇ 
# 
#  ËØ¥ÊòéÔºö 
# 
#  
#  ÊãÜÂàÜÊó∂ÂèØ‰ª•ÈáçÂ§ç‰ΩøÁî®Â≠óÂÖ∏‰∏≠ÁöÑÂçïËØç„ÄÇ 
#  ‰Ω†ÂèØ‰ª•ÂÅáËÆæÂ≠óÂÖ∏‰∏≠Ê≤°ÊúâÈáçÂ§çÁöÑÂçïËØç„ÄÇ 
#  
# 
#  Á§∫‰æã 1Ôºö 
# 
#  ËæìÂÖ•: s = "leetcode", wordDict = ["leet", "code"]
# ËæìÂá∫: true
# Ëß£Èáä: ËøîÂõû true Âõ†‰∏∫ "leetcode" ÂèØ‰ª•Ë¢´ÊãÜÂàÜÊàê "leet code"„ÄÇ
#  
# 
#  Á§∫‰æã 2Ôºö 
# 
#  ËæìÂÖ•: s = "applepenapple", wordDict = ["apple", "pen"]
# ËæìÂá∫: true
# Ëß£Èáä: ËøîÂõû true Âõ†‰∏∫ "applepenapple" ÂèØ‰ª•Ë¢´ÊãÜÂàÜÊàê "apple pen apple"„ÄÇ
# ¬†    Ê≥®ÊÑè‰Ω†ÂèØ‰ª•ÈáçÂ§ç‰ΩøÁî®Â≠óÂÖ∏‰∏≠ÁöÑÂçïËØç„ÄÇ
#  
# 
#  Á§∫‰æã 3Ôºö 
# 
#  ËæìÂÖ•: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
# ËæìÂá∫: false
#  
#  Related Topics Âä®ÊÄÅËßÑÂàí 
#  üëç 948 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def wordBreak2(self, s: str, wordDict: List[str]) -> bool:
        """dp[i] Ë°®Á§∫ s ÁöÑÂâç i ‰ΩçÊòØÂê¶ÂèØ‰ª•Áî® wordDict ‰∏≠ÁöÑÂçïËØçË°®Á§∫„ÄÇ
        ÂàùÂßãÂåñ dp[0]=TrueÔºåÁ©∫Â≠óÁ¨¶ÂèØ‰ª•Ë¢´Ë°®Á§∫„ÄÇ
        """
        n = len(s)
        dp = [True] + [False] * n
        wordDict = set(wordDict)
        for i in range(n):
            for j in range(i + 1, n + 1):
                # Ëã• dp[i]=True ËØ¥Êòés[:i]ÊòØÁ¨¶ÂêàÁöÑÔºåÂä†‰∏äs[i:j] in wordDictÔºåÈÇ£‰πàs[:j]ÈÉΩÊòØÁ¨¶ÂêàÁöÑ
                if dp[i] and (s[i:j] in wordDict):
                    dp[j] = True
        return dp[-1]

    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        """
        1. ‰∏∫‰ªÄ‰πàdpË¶ÅÂàùÂßãÂåñ‰∏∫n + 1ÁöÑÂ§ßÂ∞è, dp[i]Ë°®Á§∫[i - k, i)ÊòØÂê¶ÂåπÈÖç?
        Âõ†‰∏∫Â¶ÇÊûú‰ªé0ÂºÄÂßã, dp[i]Ë°®Á§∫[i - k + 1, i]ÂåπÈÖç, ÂàôÊó†Ê≥ïÂàùÂßãÂåñdpÁöÑÈ¶ñÈ°π, ÂØºËá¥Á¨¨‰∏Ä‰∏™ÂçïËØçÈúÄË¶ÅÁâπÂà§
        2. ‰∏∫‰ªÄ‰πàÊòØdp[i] = dp[i] or dp[i - sz] ?
        Âè™Ë¶ÅÂëΩ‰∏≠ËØçÂÖ∏‰∏≠ÁöÑ‰∏Ä‰∏™ÂçïËØçÂ∞±‰∏∫TrueÔºåÈÅçÂéÜwordDictÊó∂ÔºåÂÖ∂‰∏≠Êüê‰∏ÄÊ¨°ÂëΩ‰∏≠wordDictÔºåÂ∞±ËØ¥Êòés[:i]Á¨¶Âêà‰∫Ü
        """
        n = len(s)
        dp = [True] + [False] * n
        for i in range(1, n + 1):
            for word in wordDict:
                word_size = len(word)
                if i >= word_size and s[i - word_size:i] == word:
                    dp[i] = dp[i] or dp[i - word_size]
                    # ÂèØ‰ª•ÊõøÊç¢‰∏∫
                    # if dp[i - word_size]:
                    #     dp[i] = True
        return dp[n]
# leetcode submit region end(Prohibit modification and deletion)
